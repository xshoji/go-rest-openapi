/*
 * Sample API
 *
 * A short description of API.
 *
 * API version: 1.0.0
 * Contact: support@example.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package service

import (
	usersapi "github.com/xshoji/go-rest-openapi/usersapi/go"
	"github.com/xshoji/go-rest-openapi/usersapi/store"
	"math/rand"
	"strconv"
	"time"
)

// A UsersApiController binds http requests to an api service and writes the service results to the http response
type UsersApiControllerImpl struct {
	service usersapi.UsersApiServicer
}

// NewUsersApiController creates a default api controller
func NewUsersApiController(s usersapi.UsersApiServicer) *UsersApiControllerImpl {
	return &UsersApiControllerImpl{service: s}
}

type UsersApiServiceImpl struct {
}

func NewUsersApiService() usersapi.UsersApiServicer {
	return &UsersApiServiceImpl{}
}

// UsersGet - Get all users.
func (s *UsersApiServiceImpl) UsersGet() (interface{}, error) {
	return store.GetAll(), nil
}

// UsersPost - Create a new User
func (s *UsersApiServiceImpl) UsersPost(user usersapi.User) (interface{}, error) {
	rand.Seed(time.Now().UnixNano())
	user.Id = int32(rand.Intn(1000000-1) + 1)
	store.Put(&user)
	return user, nil
}

// UsersUserIdGet - Get user by ID.
func (s *UsersApiServiceImpl) UsersUserIdGet(userId string) (interface{}, error) {
	id, err := strconv.ParseInt(userId, 10, 32)
	if err != nil {
		return nil, nil
	}
	return store.Get(int32(id)), nil
}
