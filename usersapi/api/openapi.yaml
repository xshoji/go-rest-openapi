openapi: 3.0.2
info:
  contact:
    email: support@example.com
    name: API support
    url: https://github.com/xshoji/go-rest-openapi
  description: A short description of API.
  license:
    name: MIT License
    url: https://raw.githubusercontent.com/xshoji/go-rest-openapi/master/LICENSE
  termsOfService: http://example.com/terms/
  title: Sample API
  version: 1.0.0
servers:
- description: Development server
  url: https://dev.sample-server.com/v1
tags:
- description: Access to Users
  name: users
paths:
  /users:
    get:
      description: Returns an array of User model
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - id: 1
                  name: John Doe
                  age: 20
                  nickname: jd
                  addresss:
                    contry: JP
                    zipcode: 1112222
                    state: Tokyo
                    city: null
                  married: false
                  email: john@john.com
                  website: null
                  sports:
                  - SOCCER
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: A JSON array of User model
      summary: Get all users.
      tags:
      - users
    post:
      description: Create a new User
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: user to create
      responses:
        "201":
          description: CREATED
      summary: Create a new User
      tags:
      - users
  /users/{userId}:
    get:
      description: Returns a single User model
      parameters:
      - description: user id
        explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: A single User model
      summary: Get user by ID.
      tags:
      - users
components:
  schemas:
    User:
      example:
        website: https://openapi-generator.tech
        addresss:
          zipCode: 5
          city: city
          state: state
        sports:
        - null
        - null
        - null
        - null
        - null
        name: name
        nickname: nickname
        birth:
          datetime: 2000-01-23T04:56:07.000+00:00
          weight: 1
          hospital: hospital
        id: 0
        married: true
        age: 60
        email: email
      properties:
        id:
          format: int32
          readOnly: true
          type: integer
        name:
          maxLength: 100
          minLength: 2
          type: string
        nickname:
          maxLength: 100
          minLength: 2
          nullable: true
          type: string
        age:
          format: int32
          maximum: 100
          minimum: 0
          type: integer
        birth:
          $ref: '#/components/schemas/Birth'
        addresss:
          $ref: '#/components/schemas/Address'
        married:
          nullable: true
          type: boolean
        email:
          format: email
          nullable: true
          type: string
        website:
          format: uri
          nullable: true
          type: string
        sports:
          description: User's sports.
          items:
            $ref: '#/components/schemas/SportsType'
          maxItems: 10
          type: array
      required:
      - age
      - id
      - name
      type: object
    Birth:
      example:
        datetime: 2000-01-23T04:56:07.000+00:00
        weight: 1
        hospital: hospital
      properties:
        datetime:
          format: date-time
          type: string
        weight:
          format: int32
          nullable: true
          type: integer
        hospital:
          nullable: true
          type: string
      required:
      - datetime
      type: object
    Address:
      example:
        zipCode: 5
        city: city
        state: state
      properties:
        country:
          $ref: '#/components/schemas/Country'
        zipCode:
          maxLength: 20
          minLength: 1
          type: integer
        state:
          maxLength: 40
          minLength: 1
          type: string
        city:
          maxLength: 40
          minLength: 1
          nullable: true
          type: string
      required:
      - contory
      - state
      - zipcode
      type: object
    SportsType:
      enum:
      - 0
      - 1
      - 2
      - 3
      type: integer
      x-enum-varnames:
      - UNKNOWN_SPORTS
      - SOCCER
      - BASEBALL
      - SWIMMING
    Country:
      enum:
      - 0
      - 1
      - 2
      type: integer
      x-enum-varnames:
      - UNKNOWN_COUNTRY
      - US
      - JP
